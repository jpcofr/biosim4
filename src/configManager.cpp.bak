/**
 * @file configManager.cpp
 * @brief Implementation of modern TOML-based configuration system
 */

#include "configManager.h"

#include <algorithm>
#include <cstdlib>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <stdexcept>

#include <toml.hpp>

namespace BioSim {

ConfigManager::ConfigManager() {
    // Initialize with built-in defaults (from legacy ParamManager)
    params_ = Params{};  // Uses default initialization
    initializePresets();
}

bool ConfigManager::load(const std::string& configPath,
                          const std::map<std::string, std::string>& overrides) {
    // Step 1: Load from file (if specified or found)
    if (!configPath.empty()) {
        if (!std::filesystem::exists(configPath)) {
            std::cerr << "❌ Config file not found: " << configPath << std::endl;
            return false;
        }
        if (!loadFromToml(configPath)) {
            return false;
        }
    } else {
        // Auto-search for config file
        auto foundPath = findConfigFile();
        if (foundPath) {
            std::cout << "📄 Found config: " << *foundPath << std::endl;
            if (!loadFromToml(*foundPath)) {
                return false;
            }
        } else {
            std::cout << "ℹ️  No config file found, using defaults" << std::endl;
        }
    }

    // Step 2: Apply environment variable overrides
    applyEnvironmentOverrides();

    // Step 3: Apply command-line overrides
    for (const auto& [key, value] : overrides) {
        if (!setParameter(key, value)) {
            std::cerr << "⚠️  Failed to apply override: " << key << "=" << value
                      << std::endl;
        } else {
            std::cout << "⚙️  Override: " << key << " = " << value << std::endl;
        }
    }

    // Step 4: Validate final configuration
    try {
        validate();
    } catch (const std::exception& e) {
        std::cerr << "❌ Configuration validation failed: " << e.what() << std::endl;
        return false;
    }

    return true;
}

std::optional<std::filesystem::path> ConfigManager::findConfigFile() const {
    const std::vector<std::filesystem::path> searchPaths = {
        "biosim4.toml",          // Current directory
        "config/biosim4.toml",   // Standard location
        "biosim4.ini",           // Legacy INI format (backwards compat)
        "config/biosim4.ini",    // Legacy standard location
    };

    for (const auto& path : searchPaths) {
        if (std::filesystem::exists(path)) {
            return path;
        }
    }

    return std::nullopt;
}

bool ConfigManager::loadFromToml(const std::filesystem::path& path) {
    try {
        // Detect file format
        std::string ext = path.extension().string();
        std::transform(ext.begin(), ext.end(), ext.begin(), ::tolower);

        if (ext == ".ini") {
            std::cout << "⚠️  Loading legacy INI format (consider migrating to TOML)"
                      << std::endl;
            // For now, fall back to legacy loading (will be removed later)
            // TODO: Remove after full migration
            return false;
        }

        const auto data = toml::parse(path);
        loadedConfigPath_ = path.string();

        // Load parameters from TOML sections
        // [simulation] section
        if (data.contains("simulation")) {
            const auto& sim = toml::find(data, "simulation");
            if (sim.contains("sizeX"))
                params_.sizeX = toml::find<int>(sim, "sizeX");
            if (sim.contains("sizeY"))
                params_.sizeY = toml::find<int>(sim, "sizeY");
            if (sim.contains("population"))
                params_.population = toml::find<int>(sim, "population");
            if (sim.contains("stepsPerGeneration"))
                params_.stepsPerGeneration = toml::find<int>(sim, "stepsPerGeneration");
            if (sim.contains("maxGenerations"))
                params_.maxGenerations = toml::find<int>(sim, "maxGenerations");
        }

        // [genome] section
        if (data.contains("genome")) {
            const auto& gen = toml::find(data, "genome");
            if (gen.contains("genomeInitialLengthMin"))
                params_.genomeInitialLengthMin =
                    toml::find<int>(gen, "genomeInitialLengthMin");
            if (gen.contains("genomeInitialLengthMax"))
                params_.genomeInitialLengthMax =
                    toml::find<int>(gen, "genomeInitialLengthMax");
            if (gen.contains("genomeMaxLength"))
                params_.genomeMaxLength = toml::find<int>(gen, "genomeMaxLength");
            if (gen.contains("maxNumberNeurons"))
                params_.maxNumberNeurons = toml::find<int>(gen, "maxNumberNeurons");
        }

        // [video] section
        if (data.contains("video")) {
            const auto& vid = toml::find(data, "video");
            if (vid.contains("saveVideo"))
                params_.saveVideo = toml::find<bool>(vid, "saveVideo");
            if (vid.contains("videoStride"))
                params_.videoStride = toml::find<int>(vid, "videoStride");
            if (vid.contains("videoSaveFirstFrames"))
                params_.videoSaveFirstFrames =
                    toml::find<int>(vid, "videoSaveFirstFrames");
            if (vid.contains("displayScale"))
                params_.displayScale = toml::find<int>(vid, "displayScale");
        }

        // [performance] section
        if (data.contains("performance")) {
            const auto& perf = toml::find(data, "performance");
            if (perf.contains("numThreads"))
                params_.numThreads = toml::find<int>(perf, "numThreads");
        }

        // [challenge] section
        if (data.contains("challenge")) {
            const auto& chal = toml::find(data, "challenge");
            if (chal.contains("challenge"))
                params_.challenge = toml::find<int>(chal, "challenge");
        }

        std::cout << "✅ Loaded config from " << path << std::endl;
        return true;

    } catch (const std::exception& e) {
        std::cerr << "❌ Failed to parse TOML: " << e.what() << std::endl;
        return false;
    }
}

void ConfigManager::initializePresets() {
    // Quick test preset - fast execution for development
    presets_["quick"] = ConfigPreset{
        "quick",
        "Fast test: 10 generations, small population, no video",
        [](Params& p) {
            p.maxGenerations = 10;
            p.population = 100;
            p.stepsPerGeneration = 50;
            p.saveVideo = false;
            p.numThreads = 1;
        }};

    // Video test preset - verify video generation works
    presets_["video-test"] = ConfigPreset{
        "video-test",
        "Video generation test: 5 generations, all frames saved",
        [](Params& p) {
            p.maxGenerations = 5;
            p.population = 200;
            p.stepsPerGeneration = 100;
            p.saveVideo = true;
            p.videoStride = 1;  // Save every generation
            p.videoSaveFirstFrames = 5;
            p.displayScale = 4;
            p.numThreads = 1;
        }};

    // Micro test preset - from legacy testapp.py
    presets_["microtest"] = ConfigPreset{
        "microtest",
        "Minimal test: 11 generations, tiny genome, single-threaded",
        [](Params& p) {
            p.maxGenerations = 11;
            p.population = 100;
            p.genomeInitialLengthMin = 20;
            p.genomeInitialLengthMax = 20;
            p.genomeMaxLength = 30;
            p.maxNumberNeurons = 2;
            p.numThreads = 1;
            p.saveVideo = false;
        }};

    // Benchmark preset - performance testing
    presets_["benchmark"] = ConfigPreset{
        "benchmark",
        "Performance benchmark: Large population, multi-threaded",
        [](Params& p) {
            p.maxGenerations = 100;
            p.population = 5000;
            p.stepsPerGeneration = 300;
            p.saveVideo = false;
            p.numThreads = 0;  // Use all available cores
        }};

    // Demo preset - visually interesting for demonstrations
    presets_["demo"] = ConfigPreset{
        "demo",
        "Demonstration: Moderate run with video, nice for showing off",
        [](Params& p) {
            p.maxGenerations = 50;
            p.population = 1000;
            p.stepsPerGeneration = 200;
            p.saveVideo = true;
            p.videoStride = 5;
            p.videoSaveFirstFrames = 3;
            p.displayScale = 6;
        }};
}

bool ConfigManager::applyPreset(const std::string& presetName) {
    auto it = presets_.find(presetName);
    if (it == presets_.end()) {
        std::cerr << "❌ Unknown preset: " << presetName << std::endl;
        std::cerr << "Available presets: ";
        bool first = true;
        for (const auto& [name, _] : presets_) {
            if (!first) std::cerr << ", ";
            std::cerr << name;
            first = false;
        }
        std::cerr << std::endl;
        return false;
    }

    it->second.apply(params_);
    std::cout << "✅ Applied preset: " << presetName << " - "
              << it->second.description << std::endl;
    return true;
}

std::vector<std::string> ConfigManager::getAvailablePresets() const {
    std::vector<std::string> names;
    for (const auto& [name, _] : presets_) {
        names.push_back(name);
    }
    std::sort(names.begin(), names.end());
    return names;
}

std::string ConfigManager::getPresetDescription(const std::string& presetName) const {
    auto it = presets_.find(presetName);
    return (it != presets_.end()) ? it->second.description : "";
}

bool ConfigManager::setParameter(const std::string& key, const std::string& value) {
    return setParameterInternal(key, value);
}

bool ConfigManager::setParameterInternal(const std::string& key,
                                          const std::string& value) {
    try {
        // Simulation parameters
        if (key == "sizeX") {
            params_.sizeX = std::stoi(value);
        } else if (key == "sizeY") {
            params_.sizeY = std::stoi(value);
        } else if (key == "population") {
            params_.population = std::stoi(value);
        } else if (key == "stepsPerGeneration") {
            params_.stepsPerGeneration = std::stoi(value);
        } else if (key == "maxGenerations") {
            params_.maxGenerations = std::stoi(value);
        }
        // Genome parameters
        else if (key == "genomeInitialLengthMin") {
            params_.genomeInitialLengthMin = std::stoi(value);
        } else if (key == "genomeInitialLengthMax") {
            params_.genomeInitialLengthMax = std::stoi(value);
        } else if (key == "genomeMaxLength") {
            params_.genomeMaxLength = std::stoi(value);
        } else if (key == "maxNumberNeurons") {
            params_.maxNumberNeurons = std::stoi(value);
        }
        // Video parameters
        else if (key == "saveVideo") {
            std::string v = value;
            std::transform(v.begin(), v.end(), v.begin(), ::tolower);
            params_.saveVideo = (v == "true" || v == "1" || v == "yes");
        } else if (key == "videoStride") {
            params_.videoStride = std::stoi(value);
        } else if (key == "videoSaveFirstFrames") {
            params_.videoSaveFirstFrames = std::stoi(value);
        } else if (key == "displayScale") {
            params_.displayScale = std::stoi(value);
        }
        // Performance parameters
        else if (key == "numThreads") {
            params_.numThreads = std::stoi(value);
        }
        // Challenge parameter
        else if (key == "challenge") {
            params_.challenge = std::stoi(value);
        } else {
            std::cerr << "⚠️  Unknown parameter: " << key << std::endl;
            return false;
        }
        return true;
    } catch (const std::exception& e) {
        std::cerr << "❌ Invalid value for " << key << ": " << value << std::endl;
        return false;
    }
}

void ConfigManager::validate() const {
    // Grid size validation
    if (params_.sizeX < 16 || params_.sizeX > 2048) {
        throw std::invalid_argument("sizeX must be 16-2048, got " +
                                    std::to_string(params_.sizeX));
    }
    if (params_.sizeY < 16 || params_.sizeY > 2048) {
        throw std::invalid_argument("sizeY must be 16-2048, got " +
                                    std::to_string(params_.sizeY));
    }

    // Population validation
    if (params_.population < 1 || params_.population > 100000) {
        throw std::invalid_argument("population must be 1-100000, got " +
                                    std::to_string(params_.population));
    }

    // Check population fits in grid
    int maxPopulation = (params_.sizeX * params_.sizeY) / 4;  // 25% density max
    if (params_.population > maxPopulation) {
        throw std::invalid_argument(
            "population (" + std::to_string(params_.population) +
            ") too large for grid " + std::to_string(params_.sizeX) + "x" +
            std::to_string(params_.sizeY) + " (max ~" + std::to_string(maxPopulation) +
            ")");
    }

    // Generation parameters
    if (params_.stepsPerGeneration < 1 || params_.stepsPerGeneration > 10000) {
        throw std::invalid_argument("stepsPerGeneration must be 1-10000, got " +
                                    std::to_string(params_.stepsPerGeneration));
    }
    if (params_.maxGenerations < 1) {
        throw std::invalid_argument("maxGenerations must be >= 1, got " +
                                    std::to_string(params_.maxGenerations));
    }

    // Genome validation
    if (params_.genomeInitialLengthMin < 1) {
        throw std::invalid_argument("genomeInitialLengthMin must be >= 1");
    }
    if (params_.genomeInitialLengthMax < params_.genomeInitialLengthMin) {
        throw std::invalid_argument(
            "genomeInitialLengthMax must be >= genomeInitialLengthMin");
    }
    if (params_.genomeMaxLength < params_.genomeInitialLengthMax) {
        throw std::invalid_argument(
            "genomeMaxLength must be >= genomeInitialLengthMax");
    }

    // Video validation
    if (params_.displayScale < 1 || params_.displayScale > 32) {
        throw std::invalid_argument("displayScale must be 1-32, got " +
                                    std::to_string(params_.displayScale));
    }
}

void ConfigManager::applyEnvironmentOverrides() {
    // Check for environment variables with BIOSIM_ prefix
    const char* envVars[] = {"BIOSIM_POPULATION",    "BIOSIM_GENERATIONS",
                             "BIOSIM_SAVE_VIDEO",    "BIOSIM_NUM_THREADS",
                             "BIOSIM_VIDEO_STRIDE",  "BIOSIM_DISPLAY_SCALE",
                             "BIOSIM_SIZE_X",        "BIOSIM_SIZE_Y",
                             "BIOSIM_STEPS_PER_GEN", nullptr};

    for (int i = 0; envVars[i] != nullptr; ++i) {
        const char* value = std::getenv(envVars[i]);
        if (value != nullptr) {
            std::string key = envVars[i];
            // Remove BIOSIM_ prefix and convert to camelCase
            key = key.substr(7);  // Remove "BIOSIM_"
            std::transform(key.begin(), key.end(), key.begin(), ::tolower);

            // Convert underscores to camelCase
            std::string camelKey;
            bool nextUpper = false;
            for (char c : key) {
                if (c == '_') {
                    nextUpper = true;
                } else if (nextUpper) {
                    camelKey += std::toupper(c);
                    nextUpper = false;
                } else {
                    camelKey += c;
                }
            }

            if (setParameter(camelKey, value)) {
                std::cout << "🌍 Environment override: " << envVars[i] << "=" << value
                          << std::endl;
            }
        }
    }
}

void ConfigManager::exportToFile(const std::string& path) const {
    std::ofstream file(path);
    if (!file) {
        throw std::runtime_error("Failed to open file for writing: " + path);
    }

    file << "# BioSim4 Configuration File (TOML format)\n";
    file << "# Generated by ConfigManager\n\n";

    file << "[simulation]\n";
    file << "sizeX = " << params_.sizeX << "\n";
    file << "sizeY = " << params_.sizeY << "\n";
    file << "population = " << params_.population << "\n";
    file << "stepsPerGeneration = " << params_.stepsPerGeneration << "\n";
    file << "maxGenerations = " << params_.maxGenerations << "\n\n";

    file << "[genome]\n";
    file << "genomeInitialLengthMin = " << params_.genomeInitialLengthMin << "\n";
    file << "genomeInitialLengthMax = " << params_.genomeInitialLengthMax << "\n";
    file << "genomeMaxLength = " << params_.genomeMaxLength << "\n";
    file << "maxNumberNeurons = " << params_.maxNumberNeurons << "\n\n";

    file << "[video]\n";
    file << "saveVideo = " << (params_.saveVideo ? "true" : "false") << "\n";
    file << "videoStride = " << params_.videoStride << "\n";
    file << "videoSaveFirstFrames = " << params_.videoSaveFirstFrames << "\n";
    file << "displayScale = " << params_.displayScale << "\n\n";

    file << "[performance]\n";
    file << "numThreads = " << params_.numThreads << "\n\n";

    file << "[challenge]\n";
    file << "challenge = " << params_.challenge << "\n";

    std::cout << "✅ Configuration exported to " << path << std::endl;
}

void ConfigManager::printConfig(bool showDefaults) const {
    std::cout << "\n╔══════════════════════════════════════════╗\n";
    std::cout << "║       Current Configuration              ║\n";
    std::cout << "╚══════════════════════════════════════════╝\n\n";

    std::cout << "Simulation:\n";
    std::cout << "  Grid: " << params_.sizeX << " × " << params_.sizeY << "\n";
    std::cout << "  Population: " << params_.population << "\n";
    std::cout << "  Generations: " << params_.maxGenerations << "\n";
    std::cout << "  Steps/Gen: " << params_.stepsPerGeneration << "\n\n";

    std::cout << "Genome:\n";
    std::cout << "  Initial length: " << params_.genomeInitialLengthMin << "-"
              << params_.genomeInitialLengthMax << "\n";
    std::cout << "  Max length: " << params_.genomeMaxLength << "\n";
    std::cout << "  Max neurons: " << params_.maxNumberNeurons << "\n\n";

    std::cout << "Video:\n";
    std::cout << "  Save video: " << (params_.saveVideo ? "Yes" : "No") << "\n";
    if (params_.saveVideo) {
        std::cout << "  Video stride: " << params_.videoStride << "\n";
        std::cout << "  Save first: " << params_.videoSaveFirstFrames << " frames\n";
        std::cout << "  Display scale: " << params_.displayScale << "x\n";
    }
    std::cout << "\n";

    std::cout << "Performance:\n";
    std::cout << "  Threads: "
              << (params_.numThreads == 0 ? "auto" : std::to_string(params_.numThreads))
              << "\n\n";

    if (loadedConfigPath_) {
        std::cout << "📄 Loaded from: " << *loadedConfigPath_ << "\n";
    } else {
        std::cout << "📄 Using default configuration\n";
    }
    std::cout << std::endl;
}

}  // namespace BioSim
